// This file is generated by rust-protobuf 3.0.2. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `my.proto`

use serde::Deserialize;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_2;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:MyRequest)
pub struct MyRequest {
    // message fields
    // @@protoc_insertion_point(field:MyRequest.state)
    pub state: ::std::option::Option<::protobuf::EnumOrUnknown<my_request::State>>,
    // @@protoc_insertion_point(field:MyRequest.string_param)
    pub string_param: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:MyRequest.bool_param)
    pub bool_param: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:MyRequest.int_param)
    pub int_param: ::std::option::Option<i64>,
    // special fields
    // @@protoc_insertion_point(special_field:MyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MyRequest {
    fn default() -> &'a MyRequest {
        <MyRequest as ::protobuf::Message>::default_instance()
    }
}

impl MyRequest {
    pub fn new() -> MyRequest {
        ::std::default::Default::default()
    }

    // optional .MyRequest.State state = 1;

    pub fn state(&self) -> my_request::State {
        match self.state {
            Some(e) => e.enum_value_or(my_request::State::OPENED),
            None => my_request::State::OPENED,
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: my_request::State) {
        self.state = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string string_param = 2;

    pub fn string_param(&self) -> &str {
        match self.string_param.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_string_param(&mut self) {
        self.string_param = ::std::option::Option::None;
    }

    pub fn has_string_param(&self) -> bool {
        self.string_param.is_some()
    }

    // Param is passed by value, moved
    pub fn set_string_param(&mut self, v: ::std::string::String) {
        self.string_param = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_string_param(&mut self) -> &mut ::std::string::String {
        if self.string_param.is_none() {
            self.string_param = ::std::option::Option::Some(::std::string::String::new());
        }
        self.string_param.as_mut().unwrap()
    }

    // Take field
    pub fn take_string_param(&mut self) -> ::std::string::String {
        self.string_param.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool bool_param = 3;

    pub fn bool_param(&self) -> bool {
        self.bool_param.unwrap_or(false)
    }

    pub fn clear_bool_param(&mut self) {
        self.bool_param = ::std::option::Option::None;
    }

    pub fn has_bool_param(&self) -> bool {
        self.bool_param.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bool_param(&mut self, v: bool) {
        self.bool_param = ::std::option::Option::Some(v);
    }

    // optional int64 int_param = 5;

    pub fn int_param(&self) -> i64 {
        self.int_param.unwrap_or(0)
    }

    pub fn clear_int_param(&mut self) {
        self.int_param = ::std::option::Option::None;
    }

    pub fn has_int_param(&self) -> bool {
        self.int_param.is_some()
    }

    // Param is passed by value, moved
    pub fn set_int_param(&mut self, v: i64) {
        self.int_param = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &MyRequest| { &m.state },
            |m: &mut MyRequest| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "string_param",
            |m: &MyRequest| { &m.string_param },
            |m: &mut MyRequest| { &mut m.string_param },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bool_param",
            |m: &MyRequest| { &m.bool_param },
            |m: &mut MyRequest| { &mut m.bool_param },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "int_param",
            |m: &MyRequest| { &m.int_param },
            |m: &mut MyRequest| { &mut m.int_param },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MyRequest>(
            "MyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MyRequest {
    const NAME: &'static str = "MyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.string_param = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.bool_param = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.int_param = ::std::option::Option::Some(is.read_int64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.string_param.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.bool_param {
            my_size += 1 + 1;
        }
        if let Some(v) = self.int_param {
            my_size += ::protobuf::rt::int64_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.state {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.string_param.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.bool_param {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.int_param {
            os.write_int64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MyRequest {
        MyRequest::new()
    }

    fn clear(&mut self) {
        self.state = ::std::option::Option::None;
        self.string_param = ::std::option::Option::None;
        self.bool_param = ::std::option::Option::None;
        self.int_param = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MyRequest {
        static instance: MyRequest = MyRequest {
            state: ::std::option::Option::None,
            string_param: ::std::option::Option::None,
            bool_param: ::std::option::Option::None,
            int_param: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MyRequest`
pub mod my_request {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:MyRequest.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:MyRequest.State.OPENED)
        OPENED = 0,
        // @@protoc_insertion_point(enum_value:MyRequest.State.CANCELED)
        CANCELED = 1,
        // @@protoc_insertion_point(enum_value:MyRequest.State.CLOSED)
        CLOSED = 2,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::OPENED),
                1 => ::std::option::Option::Some(State::CANCELED),
                2 => ::std::option::Option::Some(State::CLOSED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::OPENED,
            State::CANCELED,
            State::CLOSED,
        ];
    }

    impl ::protobuf::EnumFull for State {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("MyRequest.State").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::OPENED
        }
    }

    impl State {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<State>("MyRequest.State")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug,Deserialize)]
// @@protoc_insertion_point(message:MyResponse)
pub struct MyResponse {
    // message fields
    // @@protoc_insertion_point(field:MyResponse.code)
    pub code: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:MyResponse.data)
    pub data: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:MyResponse.message)
    pub message: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:MyResponse.special_fields)
    #[serde(skip)]
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MyResponse {
    fn default() -> &'a MyResponse {
        <MyResponse as ::protobuf::Message>::default_instance()
    }
}

impl MyResponse {
    pub fn new() -> MyResponse {
        ::std::default::Default::default()
    }

    // required int64 code = 1;

    pub fn code(&self) -> i64 {
        self.code.unwrap_or(0)
    }

    pub fn clear_code(&mut self) {
        self.code = ::std::option::Option::None;
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i64) {
        self.code = ::std::option::Option::Some(v);
    }

    // required string message = 3;

    pub fn message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::string::String::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "code",
            |m: &MyResponse| { &m.code },
            |m: &mut MyResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data",
            |m: &MyResponse| { &m.data },
            |m: &mut MyResponse| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &MyResponse| { &m.message },
            |m: &mut MyResponse| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MyResponse>(
            "MyResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MyResponse {
    const NAME: &'static str = "MyResponse";

    fn is_initialized(&self) -> bool {
        if self.code.is_none() {
            return false;
        }
        if self.message.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code = ::std::option::Option::Some(is.read_int64()?);
                },
                18 => {
                    is.read_repeated_packed_int64_into(&mut self.data)?;
                },
                16 => {
                    self.data.push(is.read_int64()?);
                },
                26 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.code {
            my_size += ::protobuf::rt::int64_size(1, v);
        }
        for value in &self.data {
            my_size += ::protobuf::rt::int64_size(2, *value);
        };
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.code {
            os.write_int64(1, v)?;
        }
        for v in &self.data {
            os.write_int64(2, *v)?;
        };
        if let Some(v) = self.message.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MyResponse {
        MyResponse::new()
    }

    fn clear(&mut self) {
        self.code = ::std::option::Option::None;
        self.data.clear();
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MyResponse {
        static instance: MyResponse = MyResponse {
            code: ::std::option::Option::None,
            data: ::std::vec::Vec::new(),
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MyResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MyResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MyResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x08my.proto\"\xc1\x01\n\tMyRequest\x12&\n\x05state\x18\x01\x20\x01(\
    \x0e2\x10.MyRequest.StateR\x05state\x12!\n\x0cstring_param\x18\x02\x20\
    \x01(\tR\x0bstringParam\x12\x1d\n\nbool_param\x18\x03\x20\x01(\x08R\tboo\
    lParam\x12\x1b\n\tint_param\x18\x05\x20\x01(\x03R\x08intParam\"-\n\x05St\
    ate\x12\n\n\x06OPENED\x10\0\x12\x0c\n\x08CANCELED\x10\x01\x12\n\n\x06CLO\
    SED\x10\x02\"N\n\nMyResponse\x12\x12\n\x04code\x18\x01\x20\x02(\x03R\x04\
    code\x12\x12\n\x04data\x18\x02\x20\x03(\x03R\x04data\x12\x18\n\x07messag\
    e\x18\x03\x20\x02(\tR\x07messageJ\xce\x05\n\x06\x12\x04\0\0\x12\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x0c\x01\n\n\
    \n\x03\x04\0\x01\x12\x03\x02\x08\x11\n\x0c\n\x04\x04\0\x04\0\x12\x04\x03\
    \x02\x07\x03\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x03\x07\x0c\n\r\n\x06\
    \x04\0\x04\0\x02\0\x12\x03\x04\x04\x0f\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\
    \x12\x03\x04\x04\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x04\r\x0e\n\
    \r\n\x06\x04\0\x04\0\x02\x01\x12\x03\x05\x04\x11\n\x0e\n\x07\x04\0\x04\0\
    \x02\x01\x01\x12\x03\x05\x04\x0c\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\
    \x03\x05\x0f\x10\n\r\n\x06\x04\0\x04\0\x02\x02\x12\x03\x06\x04\x0f\n\x0e\
    \n\x07\x04\0\x04\0\x02\x02\x01\x12\x03\x06\x04\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\x02\x02\x12\x03\x06\r\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x02\
    \x1b\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x08\x02\n\n\x0c\n\x05\x04\0\x02\
    \0\x06\x12\x03\x08\x0b\x10\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\x11\
    \x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\x19\x1a\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\t\x02#\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\t\x02\n\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\t\x12\x1e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t!\"\n\x0b\
    \n\x04\x04\0\x02\x02\x12\x03\n\x02\x1f\n\x0c\n\x05\x04\0\x02\x02\x04\x12\
    \x03\n\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\n\x0b\x0f\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\n\x10\x1a\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\n\x1d\x1e\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0b\x02\x1f\n\x0c\n\x05\
    \x04\0\x02\x03\x04\x12\x03\x0b\x02\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x03\x0b\x0b\x10\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0b\x11\x1a\n\x0c\
    \n\x05\x04\0\x02\x03\x03\x12\x03\x0b\x1d\x1e\n\n\n\x02\x04\x01\x12\x04\
    \x0e\0\x12\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\x12\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03\x0f\x02\x1a\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x0f\
    \x02\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0f\x0b\x10\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x0f\x11\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x0f\x18\x19\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x10\x02\x1a\n\x0c\n\x05\
    \x04\x01\x02\x01\x04\x12\x03\x10\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03\x10\x0b\x10\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x10\x11\x15\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x10\x18\x19\n\x0b\n\x04\x04\x01\
    \x02\x02\x12\x03\x11\x02\x1e\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03\x11\
    \x02\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x11\x0b\x11\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\x11\x12\x19\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03\x11\x1c\x1d\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(MyRequest::generated_message_descriptor_data());
            messages.push(MyResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(my_request::State::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
