// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: my.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct MyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var state: MyRequest.State {
    get {return _state ?? .opened}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  mutating func clearState() {self._state = nil}

  var stringParam: String {
    get {return _stringParam ?? String()}
    set {_stringParam = newValue}
  }
  /// Returns true if `stringParam` has been explicitly set.
  var hasStringParam: Bool {return self._stringParam != nil}
  /// Clears the value of `stringParam`. Subsequent reads from it will return its default value.
  mutating func clearStringParam() {self._stringParam = nil}

  var boolParam: Bool {
    get {return _boolParam ?? false}
    set {_boolParam = newValue}
  }
  /// Returns true if `boolParam` has been explicitly set.
  var hasBoolParam: Bool {return self._boolParam != nil}
  /// Clears the value of `boolParam`. Subsequent reads from it will return its default value.
  mutating func clearBoolParam() {self._boolParam = nil}

  var intParam: Int64 {
    get {return _intParam ?? 0}
    set {_intParam = newValue}
  }
  /// Returns true if `intParam` has been explicitly set.
  var hasIntParam: Bool {return self._intParam != nil}
  /// Clears the value of `intParam`. Subsequent reads from it will return its default value.
  mutating func clearIntParam() {self._intParam = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum State: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case opened // = 0
    case canceled // = 1
    case closed // = 2

    init() {
      self = .opened
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .opened
      case 1: self = .canceled
      case 2: self = .closed
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .opened: return 0
      case .canceled: return 1
      case .closed: return 2
      }
    }

  }

  init() {}

  fileprivate var _state: MyRequest.State? = nil
  fileprivate var _stringParam: String? = nil
  fileprivate var _boolParam: Bool? = nil
  fileprivate var _intParam: Int64? = nil
}

#if swift(>=4.2)

extension MyRequest.State: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct MyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: Int64 {
    get {return _code ?? 0}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  var data: [Int64] = []

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _code: Int64? = nil
  fileprivate var _message: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MyRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "string_param"),
    3: .standard(proto: "bool_param"),
    5: .standard(proto: "int_param"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._state)
      case 2: try decoder.decodeSingularStringField(value: &self._stringParam)
      case 3: try decoder.decodeSingularBoolField(value: &self._boolParam)
      case 5: try decoder.decodeSingularInt64Field(value: &self._intParam)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._state {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._stringParam {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._boolParam {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._intParam {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MyRequest, rhs: MyRequest) -> Bool {
    if lhs._state != rhs._state {return false}
    if lhs._stringParam != rhs._stringParam {return false}
    if lhs._boolParam != rhs._boolParam {return false}
    if lhs._intParam != rhs._intParam {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MyRequest.State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPENED"),
    1: .same(proto: "CANCELED"),
    2: .same(proto: "CLOSED"),
  ]
}

extension MyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MyResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "data"),
    3: .same(proto: "message"),
  ]

  public var isInitialized: Bool {
    if self._code == nil {return false}
    if self._message == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._code)
      case 2: try decoder.decodeRepeatedInt64Field(value: &self.data)
      case 3: try decoder.decodeSingularStringField(value: &self._message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedInt64Field(value: self.data, fieldNumber: 2)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MyResponse, rhs: MyResponse) -> Bool {
    if lhs._code != rhs._code {return false}
    if lhs.data != rhs.data {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
